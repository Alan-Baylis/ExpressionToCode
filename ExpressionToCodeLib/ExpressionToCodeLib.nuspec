<?xml version="1.0"?>
<package >
	<metadata>
		<id>$id$</id>
		<version>$version$</version>
		<title>$title$</title>
		<authors>$author$</authors>
		<owners>$author$</owners>
		<licenseUrl>http://www.apache.org/licenses/LICENSE-2.0</licenseUrl>
		<projectUrl>http://code.google.com/p/expressiontocode/</projectUrl>
		<!--<iconUrl>http://ICON_URL_HERE_OR_DELETE_THIS_LINE</iconUrl>-->
		<requireLicenseAcceptance>false</requireLicenseAcceptance>
		<summary>$description$</summary>
		<description>
			Generates valid, readable C# from an Expression Tree, and can annotate that code with runtime values.  This can be useful for code generation and for unit testing: ExpressionToCode detects NUnit, xUnit.NET and MSTest and uses their assertions if available, and a normal Exception otherwise (so it runs fine outside those specific unit testing frameworks too).

			ExpressionToCode was inspired by Power Asssert.NET. It differs from PowerAssert.NET by supporting a much larger portion of the lambda syntax and to respect C#'s normal operator precedence, in addition to general polish.
		</description>
		<releaseNotes>
      Better result layout: include single-line messages after the PAssert.That expression (inline), and also avoid some clutter by not annotating the outermost expression value (which is always false or an exception which is the inner exception).
		</releaseNotes>
		<copyright>Copyright 2013 Â© Eamon Nerbonne</copyright>
		<tags>NUnit xUnit.NET mstest expression-tree unit-test PowerAssert</tags>
	</metadata>
</package>