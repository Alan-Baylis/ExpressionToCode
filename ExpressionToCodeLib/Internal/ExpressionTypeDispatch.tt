<#@ template debug="false" #>
<#@ output extension=".Generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Linq.Expressions;
using System.Diagnostics.Contracts;

namespace ExpressionToCodeLib.Internal {
  internal interface IExpressionTypeDispatch<T> {
<#
	foreach(var v in ExpressionTypes()) {
#>
		[Pure] T Dispatch<#=v.ToString()#>(Expression e);
<#
	}
#>
  }

    internal static class ExpressionTypeDispatcher {
		[Pure] public static T ExpressionDispatch<T>(this IExpressionTypeDispatch<T> dispatcher, Expression e) {
			try{
				switch(e.NodeType) {
<#
	foreach(var v in ExpressionTypes()) {
#>
					case ExpressionType.<#=v.ToString()#>: return dispatcher.Dispatch<#=v.ToString()#>(e);
<#
	}
#>
					default:
						if(Enum.IsDefined(typeof(ExpressionType),e.NodeType))
							throw new NotImplementedException("ExpressionToCode supports .NET 3.5 expressions only");
						else
							throw new ArgumentOutOfRangeException("Impossible enum value:"+(int)e.NodeType);
				}
			} catch(NotImplementedException nie) {
				throw new ArgumentOutOfRangeException("Could not dispatch expr with nodetype "+e.NodeType+" and type " +e.GetType().Name,nie);
			}
		}
	}
}
 
<#+
	IEnumerable<ExpressionType> ExpressionTypes() {
		return Enum.GetValues(typeof(ExpressionType)).Cast<ExpressionType>()
							//.Where(et=>et<= ExpressionType.TypeIs) //This check limits support to .NET 4.0 expressions
							;
	}
#>